<?php

/**
 * @file
 * Allows users to subscribe to Mailman mailing lists via a form in
 * their user profile.  List of mailing lists is defined by administrator.
 * Module maintains a list of user subscriptions and passwords.
 * Module sends requests for subscription changes to Mailman request address.
 */

/**
 * Implements hook_help().
 */
function mailman_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Utilities related to Mailman manager, subscription system and database for Mailman mailing lists.');

    case 'admin/help#mailman_manager':
      $output = '<p>' . t('Utilities related to Mailman manager, subscription system and database for Mailman mailing lists.') . '</p>';
      $output .= '<p>' . t("This tool works using the mailman email interface. All commands sent by this module are also BCC'ed to the list admin. One can optionally specify the web interface and/or the web archive of each list. The module can not know if a user is previously subscribed but allows the user to specify a password which can then be used to hook into an existing account.") . '</p>';
      return $output;
  }
}

/**
 * View API settings.
 */
function mailman_manager_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'mailman_manager') . '/views/',
  );
}

/**
 * Implements hook_node_view().
 */
function mailman_manager_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'page' && user_access('access content')) {
    return $node->content['links']['mailman_manager'] = array(
      '#links' => array(
        array(
          'title' => t('Mailing Lists'),
          'href' => 'mailman_manager',
          'html' => TRUE,
          'attributes' => array(
            'title' => t('Subscribe to mailing lists'),
          ),
        ),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function mailman_manager_permission() {
  return array(
    'access mailman_manager' => array(
      'title' => t('Access mailman_manager'),
      'description' => t('Access Mailman lists.'),
    ),
    'administer mailman_manager' => array(
      'title' => t('administer mailman_manager'),
      'description' => t('Perform administration tasks for Mailman Manager.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mailman_manager_menu() {
  $items = array();
  $items['mailman_manager'] = array(
    'title' => 'Mailing Lists',
    'page callback' => 'mailman_manager_page',
    'access arguments' => array('access mailman_manager'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/mailman_manager'] = array(
    'title' => 'Mailing Lists',
    'access arguments' => array('administer mailman_manager'),
    'description' => 'Allow users to subscribe and change their subscriptions to Mailman mailing lists.',
    'page callback' => '_mailman_manager_admin_display',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mailman_manager.admin.inc',
  );
  $items['admin/config/mailman_manager/add'] = array(
    'title' => 'Add New',
    'access arguments' => array('administer mailman_manager'),
    'description' => 'Add new Mailman mailing lists.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailman_manager_admin_form', NULL),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mailman_manager.admin.inc',
  );
  $items['admin/config/mailman_manager/edit/%'] = array(
    'title' => 'Edit Mailing list',
    'access arguments' => array('administer mailman_manager'),
    'description' => 'Edit Mailman mailing lists.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailman_manager_admin_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'mailman_manager.admin.inc',
  );
  $items['admin/config/mailman_manager/delete/%'] = array(
    'title' => 'Delete Mailing list',
    'access arguments' => array('administer mailman_manager'),
    'description' => 'Add new Mailman mailing lists.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailman_manager_admin_delete_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'mailman_manager.admin.inc',
  );
  $items['user/%user/mailman_manager'] = array(
    'title' => 'Mailing Lists',
    'access callback' => '_mailman_manager_access',
    'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mailman_manager_user_form', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 9,
  );
  return $items;
}

/**
 * Menu callback; Forwards request to user subscription form.
 */
function mailman_manager_page() {
  if (!user_access('access mailman_manager')) {
    return t('You must be an authorized member to subscribe to mailing lists');
  }
  else {
    global $user;
    drupal_goto('user/' . $user->uid . '/mailman_manager');
  }
}

/**
 * Users ca subscribe to lists through here.
 * 
 * Path: user/%user/mailman_manager
 */
function _mailman_manager_user_form($form, &$form_state, $account) {
  $form = array();
  $output = '<div class="mailman_manager">';
  $output .= '<p>' . t('The following email address will be subscribed to the email lists:') . '<br /><strong>' . $account->mail . '</strong><br />';
  $output .= t('If you would like to have a different email address subscribed, change your email address in the account settings tab.');
  $lists = _mailman_manager_get_lists();
  // drupal_set_message(print_r($lists, 1));

  if (count($lists) == 0) {
    $output = '<p>' . t('There are no mailing lists available for subscription.') . '</p>';
    $form['mman_info'] = array(
      '#type' => 'markup',
      '#value' => $output,
      '#weight' => -1,
    );
    return $form;
  }
  else {
    $status = 0;
    foreach ($lists as $list) {

      $list_roles = unserialize($list['roles']);
      $user_roles = user_roles();
      $subscrip = _mailman_manager_get_subscriptions($account->uid, $list['lid']);

      $show_list = FALSE;
      // Look for a role that bot the user and this list are in.
      foreach (array_keys($user_roles) as $rid) {

        if ($list_roles[$rid]) {
          $show_list = TRUE;
        }
      }

      if ($show_list) {
        $form['list' . trim($list['lid'])] = array(
          '#type' => 'fieldset',
          '#title' => $list['name'],
          '#collapsible' => TRUE,
        );

        if ($subscrip['lstatus'] == 0) {
          $options = array(
            '2' => t('Subscribe for digest (receive emails in a bundle)'),
            '3' => t('Subscribe for all Mail (normal delivery)'),
          );
          $status++;
        }
        else {
          $options = array(
            '0' => t('Unsubscribe'),
            '1' => t('No mail (temporarily disable delivery)'),
            '2' => t('Subscribe for digest (receive emails in a bundle)'),
            '3' => t('Subscribe for all Mail (normal delivery)'),
            '4' => t('Mail password'),
          );
        }

        // Prevent to change subscription state when there is no password to
        // manage it.
        if ($subscrip['lstatus'] > 0 && empty($subscrip['lpass'])) {
          $form['list' . trim($list['lid'])]['msg_disabled' . trim($list['lid'])] = array(
            '#value' => t('Sorry, you are not allowed to change this list subscription.'),
          );

          $options = array(
            $subscrip['lstatus'] => $options[$subscrip['lstatus']],
            '4' => t('Mail password'),
          );
        }

        $form['list' . trim($list['lid'])]['options' . trim($list['lid'])] = array(
          '#type' => 'radios',
          '#title' => t('Change your subscription'),
          '#options' => $options,
          '#default_value' => $subscrip['lstatus'],
        );

        if ($subscrip['lstatus'] == 0) {
          $form['list' . trim($list['lid'])]['pass' . trim($list['lid'])] = array(
            '#type' => 'textfield',
            '#title' => t('Password for %listname (optional)', array('%listname' => $list['name'])),
            '#size' => 15,
            '#required' => FALSE,
            '#default_value' => t($subscrip['lpass']),
          );
        }

        if ($list['web'] || $list['webarch']) {
          $link_output = '<p>' . t('Visit') . ': ';
          if ($list['web']) {
            $link_output .= l(t('Mailman Interface'), $list['web']);
          }
          if ($list['web'] && $list['webarch']) {
            $link_output .= ' ' . t('or') . ': ';
          }
          if ($list['webarch']) {
            $link_output .= l($list['name'] . ' ' . t('archive') . '.', $list['webarch']);
          }
          $form['list' . trim($list['lid'])]['links'] = array(
            '#type' => 'markup',
            '#value' => $link_output,
          );
        }
      }
    }
    if ($status != 0) {
      $output .= '<p>' . t('Your current email address is not subscribed to %status list(s).', array('%status' => $status)) . '</p>';
    }
    else {
      $output .= '<p>' . t('Your current email address is currently subscribed to all lists.') . '</p>';
    }
    $output .= '</div>';
    $form['lists']['oldemail'] = array(
      '#type' => 'hidden',
      '#default_value' => $subscrip['lmail'],
    );
    $form['lists']['newemail'] = array(
      '#type' => 'hidden',
      '#default_value' => $account->mail,
    );
  }

  $form['mman_info'] = array(
    '#type' => 'markup',
    '#value' => $output,
    '#weight' => -1,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['mailman_account'] = $account;
  return $form;
}

/**
 * Checks whether an email address is subscribed to the mailinglist when a new user signs up.
 * 
 * If so, changes uid from 0 to the new uid
 * in sn_subscriptions so that the user's subscription status is known
 * when he logs in.
 */
function _mailman_manager_user_form_submit($form, &$form_state) {
  $account = $form_state['mailman_account'];
  if (!is_numeric($account->uid)) {
    return FALSE;
  }
  $lists = _mailman_manager_get_lists();
  foreach ($lists as $list) {
    $subscrip = _mailman_manager_get_subscriptions($account->uid, $list['lid']);
    $listno = 'options' . trim($list['lid']);
    $subscrip = db_query('SELECT * FROM {mailman_users} WHERE uid = :uid AND lid = :lid', array(':uid' => $account->uid, ':lid' => $list['lid']))->fetchAssoc();
    if (empty($form_state['values']['pass' . trim($list['lid'])])) {
      $password = $subscrip['lpass'];
    }
    else {
      $password = $form_state['values']['pass' . trim($list['lid'])];
    }
    $form_state['values']['pass' . trim($list['lid'])] = '';
    if ($subscrip['lstatus'] != $form_state['values'][$listno]) {
      _mailman_manager_update_subscriptions($account->uid, $list['lid'], $form_state['values'][$listno], $subscrip['lstatus'], $account->mail, $password);
    }
  }
  drupal_set_message(t('Your mailing list subscriptions have been updated'));
}

/**
 * Deletes a mailing list.
 * 
 * Path: admin/config/mailman_manager/delete/%
 */
function mailman_manager_admin_delete_form($form, &$form_state, $lid) {
  $form = array();
  $list = mailman_manager_get_list($lid);
  $form['lid'] = array(
    '#type' => 'hidden',
    '#value' => $lid,
  );
  $form['message'] = array(
    '#type' => 'markup',
    '#value' => t('Are you sure?'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete !listname', array('!listname' => $list->name)),
  );
  return $form;
}

/**
 * Handles the submitted delete form.
 */
function mailman_manager_admin_delete_form_submit($form, &$form_state) {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  db_query('DELETE FROM {mailman_users} WHERE lid = :lid', array(':lid' => $form_state['values']['lid']));
  $result = db_delete('mailman_users')
      ->condition('lid', $form_state['values']['lid'])
      ->execute();

  db_query('DELETE FROM {mailman_lists} WHERE lid = :lid', array(':lid' => $form_state['values']['lid']));

  watchdog('mailman man', 'Successfully deleted Mailman list %listid', array('%listid' => $form_state['values']['lid']), WATCHDOG_NOTICE);
  drupal_goto('admin/config/mailman_manager');
}

/**
 * Gets a mailling list.
 */
function mailman_manager_get_list($id) {
  return db_query('SELECT * FROM {mailman_lists} WHERE lid = :lid', array(':lid' => $id))->fetchObject();
}

/**
 * Return all Drupal roles.
 */
function _mailman_manager_get_roles() {
  $result = db_query('SELECT * FROM {role} ORDER BY name');
  $options = array();
  foreach ($result as $role) {
    $options[$role->rid] = t($role->name);
  }
  return $options;
}

/**
 * Return array of objects of current mailing lists.
 */
function _mailman_manager_get_lists() {
  $result = db_query('SELECT * FROM {mailman_lists} ORDER BY name')->fetchAll(PDO::FETCH_ASSOC);
  $lists = array();
  foreach ($result as $list) {
    $lists[] = $list;
  }
  return $lists;
}

/**
 * Return array of user's subscriptions to mailing lists.
 */
function _mailman_manager_get_subscriptions($uid, $lid) {
  $subscription = db_query('SELECT * FROM {mailman_users} WHERE uid = :uid AND lid = :lid', array(':uid' => $uid, ':lid' => $lid))->fetchAssoc();
  // If there are no entries for this user then set subscriptions to zero
  // and return no mail button option for display.
  if (empty($subscription)) {
    $sub->uid = $uid;
    $sub->lid = $lid;
    $sub->lstatus = 0;
    drupal_write_record('mailman_users', $sub);
  }

  return $subscription;
}

/**
 * Update user's subscriptions to mailing lists.
 */
function _mailman_manager_update_subscriptions($uid, $lid, $lstatus, $oldstatus, $mail, $password) {
  // Do not update status for 'mail password':
  if ($lstatus != 4) {
    db_query('UPDATE {mailman_users} SET lstatus = :lstatus WHERE uid = :uid AND lid = :lid', array(
      ':lstatus' => $lstatus,
      ':uid' => $uid,
      ':lid' => $lid,
    ));
    db_update('mailman_users')
        ->fields(array(
          'lstatus' => $lstatus,
        ))
        ->condition('uid', $uid)
        ->condition('lid', $lid)
        ->execute();
  }

  switch ($lstatus) {
    // Unsubscribe selected.
    case 0:
      $command = 'unsubscribe ' . $password . ' address=' . $mail;
      _mailman_manager_setdelivery($uid, $lid, $mail, $command);
      watchdog('mailman man', 'User %uid unsubscribed from list %lid', array('%lid' => $lid, '%uid' => $uid), WATCHDOG_NOTICE);
      break;

    // No email selected.
    case 1:
      $command = 'set authenticate ' . $password . ' address=' . $mail . "\n";
      $command .= 'set delivery off';
      _mailman_manager_setdelivery($uid, $lid, $mail, $command);
      watchdog('mailman man', 'Subscription to list %lid for user %uid changed to no mail', array('%lid' => $lid, '%uid' => $uid), WATCHDOG_NOTICE);
      break;

    // Digest selected.
    case 2:
      if ($oldstatus == 0) {
        _mailman_manager_subscribe($uid, $lid, $mail, 'digest', $password);
      }
      else {
        $command = 'set authenticate ' . $password . ' address=' . $mail . "\n";
        $command .= "set delivery on\n";
        $command .= 'set digest plain';
        _mailman_manager_setdelivery($uid, $lid, $mail, $command);
        watchdog('mailman man', 'Subscription to list %lid for user %uid changed to digest', array('%lid' => $lid, '%uid' => $uid), WATCHDOG_NOTICE);
      }
      break;

    // All mail selected.
    case 3:
      if ($oldstatus == 0) {
        _mailman_manager_subscribe($uid, $lid, $mail, 'nodigest', $password);
      }
      else {
        $command = 'set authenticate ' . $password . ' address=' . $mail . "\n";
        $command .= "set delivery on\n";
        $command .= 'set digest off';
        _mailman_manager_setdelivery($uid, $lid, $mail, $command);
        watchdog('mailman man', 'Subscription to list %lid for user %uid changed to all mail', array('%lid' => $lid, '%uid' => $uid), WATCHDOG_NOTICE);
      }
      break;

    // Mail pwd selected.
    case 4:
      if ($oldstatus == 0) {
        return;
      }
      else {
        $command = 'password address=' . $mail . "\n";
        _mailman_manager_setdelivery($uid, $lid, $mail, $command);
        watchdog('mailman man', 'Password for list %lid for user %uid sent by mail', array('%lid' => $lid, '%uid' => $uid), WATCHDOG_NOTICE);
      }
      break;
  }
}

/**
 * Create a new subscription by sending request email to Mailman.
 */
function _mailman_manager_subscribe($uid, $lid, $mail, $digest, $password) {
  $params = array();
  $list = db_query('SELECT * FROM {mailman_lists} WHERE lid = :lid', array(':lid' => $lid))->fetchAssoc();
  $commandaddress = $list['command'];
  $adminaddress = $list['admin'];
  if ($password == '') {
    $password = _mailman_manager_rand_str(5);
    $password .= trim($uid) . drupal_substr($mail, 0, 1);
  }
  $params['command'] = 'subscribe ' . $password . ' ' . $digest . ' address=' . trim($mail);

  // If the adminaddress was given, use BCC.
  if ($adminaddress != '') {
    $params['bcc'] = $adminaddress;
  }
  $mailsuccess = drupal_mail('mailman_manager', 'subscribe', $commandaddress, language_default(), $params);

  db_query("UPDATE {mailman_users} SET lmail = :mail, lpass = :password WHERE uid = :uid AND lid = :lid", array(
    ':mail' => $mail,
    ':password' => $password,
    ':uid' => $uid,
    ':lid' => $lid,
  ));
  if ($mailsuccess['result'] && db_update('mailman_users')
          ->fields(array(
            'lmail' => $mail,
            'lpass' => $password,
          ))
          ->condition('uid', $uid)
          ->condition('lid', $lid)
          ->execute()) {
    watchdog('mailman man', 'New subscription to list %lid for user %uid completed successfully.', array('%lid' => $lid, '%uid' => $uid), WATCHDOG_NOTICE);
  }
  else {
    watchdog('mailman man', 'New subscription to list %lid for user %uid failed.', array('%lid' => $lid, '%uid' => $uid), WATCHDOG_ERROR);
  }
}

/**
 * Update settings for a subscription by sending request email to Mailman.
 */
function _mailman_manager_setdelivery($uid, $lid, $mail, $command) {
  $params = array('command' => $command);
  $query = 'SELECT * FROM {mailman_lists} WHERE lid = %d';
  $list = db_query('SELECT * FROM {mailman_lists} WHERE lid = :lid', array(':lid' => $lid))->fetchAssoc();
  $commandaddress = $list['command'];
  $adminaddress = $list['admin'];

  // If the adminaddress was given, use BCC.
  if ($adminaddress != '') {
    $params['bcc'] = $adminaddress;
  }
  watchdog('mailman man', 'Mail command sent to Mailman to: %commandaddress. Command: %command', array('%commandaddress' => $commandaddress, '%command' => $command), WATCHDOG_NOTICE);
  drupal_mail('mailman_manager', 'notify', $commandaddress, language_default(), $params);
}

/**
 * Prepear a mail to be sent to a mailman service.
 */
function mailman_manager_mail($key, &$message, $params) {
  if (isset($params['bcc'])) {
    $massage['headers']['bcc'] = $params['bcc'];
  }
  $message['subject'] = '';
  $message['body'][] = $params['command'];
}

/**
 * Generation of five character random text string for Mailman password.
 */
function _mailman_manager_rand_str($size) {
  $feed = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
  $rand_str = '';
  for ($i = 0; $i < $size; $i++) {
    $rand_str .= drupal_substr($feed, rand(0, drupal_strlen($feed) - 1), 1);
  }
  return $rand_str;
}

/**
 * Check if a user can access the list subscription form.
 */
function _mailman_manager_access($account) {
  global $user;
  return $account && $account->uid &&
      (
      // Always let users view their own profile.
      ($user->uid == $account->uid && user_access('access mailman_manager')) ||
      // Mailman administrators are allowed to change subscriptions.
      user_access('administer mailman_manager')
      );
}
